<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python 调用 C 语言动态链接库里的函数</title>
      <link href="/2021/11/26/invoke-c-shared-library-from-python/"/>
      <url>/2021/11/26/invoke-c-shared-library-from-python/</url>
      
        <content type="html"><![CDATA[<p>源代码在: <a href="https://github.com/archibate/archibate.github.io/tree/master/codes/invoke-c-shared-library-from-python">https://github.com/archibate/archibate.github.io/tree/master/codes/invoke-c-shared-library-from-python</a></p><p>最近需要在 Blender 里调用 Zeno 的 C++ 部分，本来一直在用 Pybind11，但是他一旦换一个 Python 版本就会加载失败，同时一个个去调用 def 也非常麻烦。<br>目前主要是传指针字符串之类的，没有对复杂数据结构和类的深度绑定的需求，因此我开始探索另一种兼容性更好的方案——甚至不需要 Python 的头文件。</p><p>原来 Python 支持导入任意由 C 语言编写的动态链接库（<code>.so</code> 或者 <code>.dll</code>），并调用其中的函数。<br>这其中又有哪些坑呢，今天就让我们一探究竟。</p><h1 id="符号导出机制"><a href="#符号导出机制" class="headerlink" title="符号导出机制"></a>符号导出机制</h1><p>针对不同的系统，分类讨论：</p><h2 id="Linux-很简单"><a href="#Linux-很简单" class="headerlink" title="Linux 很简单"></a>Linux 很简单</h2><p>首先用 CMake 创建一个 shared library 目标：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CMakeLists.txt</span></span><br><span class="line"><span class="keyword">add_library</span>(mylib SHARED mylib.c)</span><br></pre></td></tr></table></figure><p>C 语言源代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mylib.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">say_hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello, world!\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmake -B build</span><br><span class="line">cmake --build build</span><br></pre></td></tr></table></figure><p>编译后会得到 <code>build/libmylib.so</code> 。</p><p>然后在 Python 脚本里写：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"></span><br><span class="line">mylib = ctypes.cdll.LoadLibrary(<span class="string">&#x27;build/libmylib.so&#x27;</span>)</span><br><span class="line">mylib.say_hello()</span><br></pre></td></tr></table></figure><p>成功打印：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello, world!</span><br></pre></td></tr></table></figure><h2 id="Windows-不一样"><a href="#Windows-不一样" class="headerlink" title="Windows 不一样"></a>Windows 不一样</h2><p>然而我们试着如果用同样的配置在 Windows 上测试：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"></span><br><span class="line">mylib = ctypes.cdll.LoadLibrary(<span class="string">&#x27;build\\mylib.dll&#x27;</span>)</span><br><span class="line">mylib.say_hello()</span><br></pre></td></tr></table></figure><p>会发现调用出错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AttributeError: build\mylib.dll: undefined symbol: say_hello</span><br></pre></td></tr></table></figure><p>这是什么原因呢？</p><p>原来 Windows 的设计为了安全，默认不会把 DLL 的所有符号导出，需要这样写：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mylib.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">__declspec(dllexport) <span class="function"><span class="keyword">void</span> <span class="title">say_hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello, world!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">this_func_wont_export</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>需要导出的，前面加上 <code>__declspec(dllexport)</code>，不希望导出的，就不加。<br>如果想要和 Linux 一样默认全部导出，也可以在 CMake 里这样指定：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CMakeLists.txt</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS <span class="keyword">ON</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>(mylib SHARED mylib.c)</span><br></pre></td></tr></table></figure><h2 id="Linux-也可以默认不导出"><a href="#Linux-也可以默认不导出" class="headerlink" title="Linux 也可以默认不导出"></a>Linux 也可以默认不导出</h2><p>反过来，Linux 也可以修改成默认不导出，只有指定的符号才导出：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span>(CMAKE_C_VISIBILITY_PRESET hidden)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_VISIBILITY_PRESET hidden)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>(mylib SHARED mylib.c)</span><br></pre></td></tr></table></figure><p>然后像这样指定前缀：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mylib.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">__attribute__((visibility(<span class="string">&quot;default&quot;</span>))) <span class="function"><span class="keyword">void</span> <span class="title">say_hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello, world!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">this_func_wont_export</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>我们可以用一个宏来统一 Windows 和 Linux 的导出指定前缀：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _WIN32  <span class="comment">// 如果在 Windows 上</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DLLEXPORT __declspec(dllexport)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span>          <span class="comment">// 否则在 Unix 类系统上</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DLLEXPORT __attribute__((visibility(<span class="meta-string">&quot;default&quot;</span>)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">DLLEXPORT <span class="keyword">void</span> <span class="title">say_hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello, world!\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-大不一样"><a href="#C-大不一样" class="headerlink" title="C++ 大不一样"></a>C++ 大不一样</h1><p>然而，如果我们用的不是 C 语言，而是 C++，还是会出现符号找不到的问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AttributeError: build/mylib.so: undefined symbol: say_hello</span><br></pre></td></tr></table></figure><p>这是为什么呢？我们来用 Linux 下的 <code>nm</code> 小工具分析一下生成的动态链接库。</p><p>用 C 语言编译：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ nm build/libmylib.so | grep -w T</span><br><span class="line">0000000000001109 T say_hello</span><br></pre></td></tr></table></figure><p>用 C++ 编译：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ nm build/libmylib.so | grep -w T</span><br><span class="line">0000000000001139 T _Z9say_hellov</span><br></pre></td></tr></table></figure><p>可以看到 C++ 中原本叫 <code>say_hello</code> 的函数变成了一个奇怪的名字： <code>_Z9say_hellov</code><br>这是为什么呢？</p><h2 id="C-函数名重组机制"><a href="#C-函数名重组机制" class="headerlink" title="C++ 函数名重组机制"></a>C++ 函数名重组机制</h2><p>原来是 C++ 为了实现函数的重载和名字空间等特性，对函数名对应的符号进行了一些魔改，<br>C++ 魔改的符号都以 <code>_Z</code> 开头，后面紧跟着一个数字，表示接下来的符号长度，这里<br><code>say_hello</code> 的字符串长度为 9，因此是 <code>_Z9</code>，然后 <code>v</code> 表示函数的参数是 void，也就<br>是没有参数。</p><p>解决方法是要么直接在 Python 里写重组后的符号名：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"></span><br><span class="line">mylib = ctypes.cdll.LoadLibrary(<span class="string">&#x27;build/libmylib.so&#x27;</span>)</span><br><span class="line">mylib._Z9say_hellov()</span><br></pre></td></tr></table></figure><p>要么在 C++ 源文件里使用 <code>extern &quot;C&quot;</code> 声明为 C 兼容函数（但是没法重载了）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function">DLLEXPORT <span class="keyword">void</span> <span class="title">say_hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello, world!\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>个人推荐后面一种方案。</p><h1 id="读取哪一个文件"><a href="#读取哪一个文件" class="headerlink" title="读取哪一个文件"></a>读取哪一个文件</h1><p>这里我们硬编码了 <code>build\\mylib.dll</code> 等路径，导致无法跨平台。<br>可以让 Python 运行时动态判断当前是什么系统，读取不同的文件路径和扩展名。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_library</span>(<span class="params">path, name</span>):</span></span><br><span class="line">    <span class="keyword">if</span> sys.platform == <span class="string">&#x27;win32&#x27;</span>:       <span class="comment"># *.dll</span></span><br><span class="line">        <span class="keyword">return</span> ctypes.cdll.LoadLibrary(os.path.join(path, name + <span class="string">&#x27;.dll&#x27;</span>))</span><br><span class="line">    <span class="keyword">elif</span> sys.platform == <span class="string">&#x27;linux&#x27;</span>:     <span class="comment"># lib*.so</span></span><br><span class="line">        <span class="keyword">return</span> ctypes.cdll.LoadLibrary(os.path.join(path, <span class="string">&#x27;lib&#x27;</span> + name + <span class="string">&#x27;.so&#x27;</span>))</span><br><span class="line">    <span class="keyword">elif</span> sys.platform == <span class="string">&#x27;darwin&#x27;</span>:    <span class="comment"># lib*.dylib</span></span><br><span class="line">        <span class="keyword">return</span> ctypes.cdll.LoadLibrary(os.path.join(path, <span class="string">&#x27;lib&#x27;</span> + name + <span class="string">&#x27;.dylib&#x27;</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> ImportError(<span class="string">&#x27;Unsupported platform: &#x27;</span> + sys.platform)</span><br><span class="line"></span><br><span class="line">mylib = load_library(<span class="string">&#x27;build&#x27;</span>, <span class="string">&#x27;mylib&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这里我们用了 <code>sys.platform</code> 判断当前操作系统，<code>os.path.join</code> 在 Unix 类系统上是 <code>&#39;/&#39;.join</code>，<br>Windows 上是 <code>&#39;\\&#39;.join</code>。<code>path</code> 用作读取文件所在的目录，<code>name</code> 和 CMake 的目标名相同。</p><h1 id="函数参数与返回"><a href="#函数参数与返回" class="headerlink" title="函数参数与返回"></a>函数参数与返回</h1><p>让我们定义几个带参数的函数作为测试：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function">DLLEXPORT <span class="keyword">int</span> <span class="title">twice_int</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function">DLLEXPORT <span class="keyword">float</span> <span class="title">twice_float</span><span class="params">(<span class="keyword">float</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">2.f</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function">DLLEXPORT <span class="keyword">void</span> <span class="title">print_str</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;str is: %s\n&quot;</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Python 调用的 C 函数可以有参数和返回值，不过 Python 实际并不知道有几个参数，分别是什么类型，<br>所以需要我们自己去指定参数和返回值的类型（如果不指定，默认参数全部为 int，返回值也为 int）：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mylib.twice_int.argtypes = [ctypes.c_int]</span><br><span class="line">mylib.twice_int.restype = ctypes.c_int</span><br><span class="line">mylib.twice_float.argtypes = [ctypes.c_float]</span><br><span class="line">mylib.twice_float.restype = ctypes.c_float</span><br><span class="line">mylib.print_str.argtypes = [ctypes.c_char_p]</span><br><span class="line">mylib.print_str.restype = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mylib.twice_int(<span class="number">21</span>))       <span class="comment"># 42</span></span><br><span class="line"><span class="built_in">print</span>(mylib.twice_float(<span class="number">3.14</span>))   <span class="comment"># 6.28</span></span><br><span class="line">mylib.print_str(<span class="string">b&#x27;Hello, C++!&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ python main.py</span><br><span class="line">42</span><br><span class="line">6.28000020980835</span><br><span class="line">str is: Hello, C++!</span><br></pre></td></tr></table></figure><h2 id="传递-NumPy-数组"><a href="#传递-NumPy-数组" class="headerlink" title="传递 NumPy 数组"></a>传递 NumPy 数组</h2><p>有时候我们需要把一个 Python 端的数组传入/传出 C 语言的部分，可以传一个指针 + 一个大小来表示数组：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mylib.test_array.argtypes = [ctypes.c_void_p, ctypes.c_size_t]</span><br><span class="line">mylib.test_array.restype = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arr = np.random.rand(<span class="number">32</span>).astype(np.float32)</span><br><span class="line">mylib.test_array(arr.ctypes.data, arr.shape[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function">DLLEXPORT <span class="keyword">void</span> <span class="title">test_array</span><span class="params">(<span class="keyword">float</span> *base, <span class="keyword">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%ld: %f\n&quot;</span>, i, base[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到这里指针意味着按引用传递，因此也可以用于返回一个数组。</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 部署时会删除 CNAME 解决</title>
      <link href="/2021/11/16/hexo-deploy-removes-cname-fix/"/>
      <url>/2021/11/16/hexo-deploy-removes-cname-fix/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-deploy-时会删除-CNAME"><a href="#hexo-deploy-时会删除-CNAME" class="headerlink" title="hexo deploy 时会删除 CNAME"></a>hexo deploy 时会删除 CNAME</h1><p>在 GitHub 的 Settings -&gt; Pages 页面设置了自定义域名 <code>archibate.top</code>。<br>就可以实现 <code>archibate.top</code> 访问而不是 <code>archibate.github.io</code> 了。</p><p>然而发现每次 <code>hexo d</code> 都会导致定制域名失效。</p><p>原理：GitHub 所谓设置自定义域名，实质是在 gh-pages 分支添加了一个叫 <code>CNAME</code> 的<br>文本文件，内容为你的自定义域名。<br>而 <code>hexo d</code> 每次都会全部重写整个 gh-pages 的内容，也就是全新的 repo 去 force push<br>，导致 <code>CNAME</code> 文件被覆盖。</p><p>解决：原来 hexo 的 <code>sources/</code> 文件夹内的内容都会直接出现在 gh-pages 里（下划线<br>开头的 <code>_posts</code> 除外）因此创建 <code>sources/CNAME</code>，内容为 <code>archibate.top</code> 即可在<br>下次 deploy 时候变成我的域名。</p><h1 id="缺少-tags-和-categories-页面"><a href="#缺少-tags-和-categories-页面" class="headerlink" title="缺少 tags 和 categories 页面"></a>缺少 tags 和 categories 页面</h1><p>可以看到在主页顶部有个叫 Tags 的链接，点击后跳转到 <code>archibate.top/tags</code>，出现 404 错误。</p><p>解决方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p>打开 <code>sources/tags/index.md</code>，修改内容为：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Tag Cloud</span><br><span class="line">date: .......</span><br><span class="line"><span class="section">layout: tags</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><p>categories 同理。</p><p>其中 <code>layout: tags</code> 表示使用 <code>themes/freemind.386/layout/tags.ejs</code> 作为渲染器（？）</p><h1 id="hexo-设置多个部署目标"><a href="#hexo-设置多个部署目标" class="headerlink" title="hexo 设置多个部署目标"></a>hexo 设置多个部署目标</h1><p>由于需要同时部署到 GitHub 和 Gitee，我希望 <code>hexo d</code> 能一次性部署两个。</p><p>解决：将</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/archibate/archibate.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">gh-pages</span></span><br></pre></td></tr></table></figure><p>修改成：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">https://github.com/archibate/archibate.github.io.git</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">gh-pages</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">https://gitee.com/archibate/archibate.git</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">gh-pages</span></span><br></pre></td></tr></table></figure><p>其中 <code>-</code> 是 YAML 的列表表达方式，相当于 JSON 的 <code>[]</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;deploy: [&#123;type: <span class="string">&quot;git&quot;</span>, repo: <span class="string">&quot;github&quot;</span>&#125;, &#123;type: <span class="string">&quot;git&quot;</span>, repo: <span class="string">&quot;gitee&quot;</span>&#125;]&#125;</span><br></pre></td></tr></table></figure><h1 id="Git-也可以设置多个-push-目标"><a href="#Git-也可以设置多个-push-目标" class="headerlink" title="Git 也可以设置多个 push 目标"></a>Git 也可以设置多个 push 目标</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim .git/config</span><br></pre></td></tr></table></figure><p>将：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">url = https://github.com/archibate/archibate.github.io.git</span><br><span class="line">fetch = +refs/heads/*:refs/remotes/origin/*</span><br></pre></td></tr></table></figure><p>修改成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">url = https://github.com/archibate/archibate.github.io.git</span><br><span class="line">fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line">url = https://gitee.com/archibate/archibate.git</span><br></pre></td></tr></table></figure><p>这样以后 <code>git push</code> 会先推 GitHub，再推 Gitee，pull 也能同时拉两个。</p><p>就是有时候隔着代理推 Gitee 会出现 <code>443 SSL_Error</code> 的报错，以后研究<br>一下怎么绕过 domestic IP。或者把 Gitee 的 remote 改成 ssh 的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装 Claudia 主题出错</title>
      <link href="/2021/11/15/installing-claudia-encounters-error/"/>
      <url>/2021/11/15/installing-claudia-encounters-error/</url>
      
        <content type="html"><![CDATA[<p>发现一个好看的 Hexo 主题：<a href="https://github.com/Haojen/hexo-theme-Claudia">https://github.com/Haojen/hexo-theme-Claudia</a></p><p>根据 README 中的指引，安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug</span><br><span class="line">npm install hexo-renderer-sass</span><br><span class="line">npm install hexo-generator-search</span><br></pre></td></tr></table></figure><p>出现错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">npm ERR! /home/bate/.node-gyp/16.11.1/include/node/v8-internal.h: In function ‘void v8::internal::PerformCastCheck(T*)’:</span><br><span class="line">npm ERR! /home/bate/.node-gyp/16.11.1/include/node/v8-internal.h:492:38: error: ‘remove_cv_t’ is not a member of ‘std’; did you mean ‘remove_cv’?</span><br><span class="line">npm ERR!   492 |             !std::is_same&lt;Data, std::remove_cv_t&lt;T&gt;&gt;::value&gt;::Perform(data);</span><br><span class="line">npm ERR!       |                                      ^~~~~~~~~~~</span><br><span class="line">npm ERR!       |                                      remove_cv</span><br><span class="line">npm ERR! /home/bate/.node-gyp/16.11.1/include/node/v8-internal.h:492:38: error: ‘remove_cv_t’ is not a member of ‘std’; did you mean ‘remove_cv’?</span><br><span class="line">npm ERR!   492 |             !std::is_same&lt;Data, std::remove_cv_t&lt;T&gt;&gt;::value&gt;::Perform(data);</span><br><span class="line">npm ERR!       |                                      ^~~~~~~~~~~</span><br><span class="line">npm ERR!       |                                      remove_cv</span><br><span class="line">npm ERR! /home/bate/.node-gyp/16.11.1/include/node/v8-internal.h:492:50: error: template argument 2 is invalid</span><br><span class="line">npm ERR!   492 |             !std::is_same&lt;Data, std::remove_cv_t&lt;T&gt;&gt;::value&gt;::Perform(data);</span><br><span class="line">npm ERR!       |                                                  ^</span><br><span class="line">npm ERR! /home/bate/.node-gyp/16.11.1/include/node/v8-internal.h:492:63: error: ‘::Perform’ has not been declared</span><br><span class="line">npm ERR!   492 |             !std::is_same&lt;Data, std::remove_cv_t&lt;T&gt;&gt;::value&gt;::Perform(data);</span><br><span class="line">npm ERR!       |                                                               ^~~~~~~</span><br><span class="line">npm ERR! ../src/binding.cpp: In function ‘Nan::NAN_METHOD_RETURN_TYPE render(Nan::NAN_METHOD_ARGS_TYPE)’:</span><br></pre></td></tr></table></figure><p>出错原因：<code>std::remove_cv_t</code> 是 C++14 引入的，而 <code>gcc</code> 默认为 C++11，感叹 C++ 拖后腿日常。</p><p>解决问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CXXFLAGS=<span class="string">&quot;--std=c++17&quot;</span> npm install hexo-renderer-sass</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手把手教你在 C++17 中从零开始实现 ranges 库</title>
      <link href="/2021/11/15/implementing-ranges-library-from-scratch/"/>
      <url>/2021/11/15/implementing-ranges-library-from-scratch/</url>
      
        <content type="html"><![CDATA[<h1 id="手把手教你在-C-17-中从零开始实现-ranges-库"><a href="#手把手教你在-C-17-中从零开始实现-ranges-库" class="headerlink" title="手把手教你在 C++17 中从零开始实现 ranges 库"></a>手把手教你在 C++17 中从零开始实现 ranges 库</h1><p><del>关于为什么 C++20 引入了 ranges 库却没有 zip 还要用户自己实现这件事</del></p><p>So in this post, you will learn how to write a ranges library from scratch in C++17,<br>with some useful functionality that doesn’t exists in the C++20 library <code>&lt;ranges&gt;</code>,<br>like <code>enumerate</code> or <code>zip</code>.</p><h1 id="C-11-range-based-loop"><a href="#C-11-range-based-loop" class="headerlink" title="C++11 range-based loop"></a>C++11 range-based loop</h1><p>It’s very convinent to use range-based for loop since C++11:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">std::vector&lt;<span class="keyword">int</span>&gt; list;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;&amp;x: list) &#123;</span><br><span class="line">    <span class="built_in">print</span>(x + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-20-ranges-library"><a href="#C-20-ranges-library" class="headerlink" title="C++20 ranges library"></a>C++20 ranges library</h2><p>But sometimes, I wonder what if I need to get the index while iterating over a range?<br>In Python, we can use <code>enumerate</code>, <code>zip</code>, <code>map</code>, and so on.<br>While there is no equivalant functions in C++, until C++20 which introduced many<br>range operations like <code>std::views::transform</code> for <code>map</code> in Python, use it like this:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ranges&gt;</span></span></span><br><span class="line"></span><br><span class="line">std::vector&lt;<span class="keyword">int</span>&gt; list;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;&amp;x: list</span><br><span class="line">    | std::views::<span class="built_in">transform</span>([] (<span class="keyword">auto</span> &amp;&amp;x) &#123; <span class="keyword">return</span> x + <span class="number">1</span>; &#125;)</span><br><span class="line">    ) &#123;</span><br><span class="line">    <span class="built_in">print</span>(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It will apply <code>+ 1</code> to every value in <code>list</code> before calling into the loop body.</p><p>Yeah, the <code>operator|</code> here - I’d like to call it the <em>pipe style</em>, is even more convinent than<br>Python’s <em>function style</em> range operations. Especially when the pipe is long:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ranges&gt;</span></span></span><br><span class="line"></span><br><span class="line">std::vector&lt;unique_ptr&lt;<span class="keyword">int</span>&gt;&gt; list;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;&amp;x: list</span><br><span class="line">    | std::views::<span class="built_in">transform</span>([] (<span class="keyword">auto</span> &amp;&amp;x) &#123; <span class="keyword">return</span> x.<span class="built_in">get</span>(); &#125;)</span><br><span class="line">    | std::views::<span class="built_in">transform</span>([] (<span class="keyword">auto</span> &amp;&amp;x) &#123; <span class="keyword">return</span> x + <span class="number">1</span>; &#125;)</span><br><span class="line">    | std::views::reverse</span><br><span class="line">    ) &#123;</span><br><span class="line">    <span class="built_in">print</span>(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Of course, the function style also supported in C++20:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ranges&gt;</span></span></span><br><span class="line"></span><br><span class="line">std::vector&lt;<span class="keyword">int</span>&gt; list;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;&amp;x: std::views::<span class="built_in">transform</span>([] (<span class="keyword">auto</span> &amp;&amp;x) &#123; <span class="keyword">return</span> x + <span class="number">1</span>; &#125;, list)) &#123;</span><br><span class="line">    <span class="built_in">print</span>(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The lambda definition looks too verbose here, let’s simplify it by a macro:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ranges&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LAMBDA1(x, ...) [&amp;] (auto &amp;&amp;x) &#123; return (__VA_ARGS__); &#125;)</span></span><br><span class="line"></span><br><span class="line">std::vector&lt;<span class="keyword">int</span>&gt; list;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;&amp;x: list | std::views::<span class="built_in">transform</span>(<span class="built_in">LAMBDA1</span>(x, x + <span class="number">1</span>))) &#123;</span><br><span class="line">    <span class="built_in">print</span>(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Wait-a-miniute…"><a href="#Wait-a-miniute…" class="headerlink" title="Wait a miniute…"></a>Wait a miniute…</h2><p>However, the <code>transform</code> or <code>map</code> isn’t so useful after all.<br>While they don’t even have <code>zip</code> and <code>enumerate</code>!!!<br>They are very commonly used in daily programming. Otherwise I still have to write <code>for (int i...</code> when the index is necessary.</p><p>So I decide to write my only ranges library rather than waiting for C++ standard to<br>support this.</p><h1 id="My-ranges-library"><a href="#My-ranges-library" class="headerlink" title="My ranges library!"></a>My ranges library!</h1><p>First of all, we need to define a generic <code>range</code> class.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">It</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">range</span> &#123;</span></span><br><span class="line">    It m_begin;</span><br><span class="line">    It m_end;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="title">range</span><span class="params">(It begin, It end)</span></span></span><br><span class="line"><span class="function">        : m_begin(std::move(begin)), m_end(std::move(end))</span></span><br><span class="line"><span class="function">    &#123;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> It <span class="title">begin</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> m_begin; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> It <span class="title">end</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> m_end; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Then, we we want to create a range for a <code>std::vector&lt;int&gt;</code>, we can use:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">std::vector&lt;<span class="keyword">int</span>&gt; list;</span><br><span class="line"><span class="keyword">auto</span> r = range&lt;std::vector&lt;<span class="keyword">int</span>&gt;::iterator&gt;(list.<span class="built_in">begin</span>(), list.<span class="built_in">end</span>());</span><br></pre></td></tr></table></figure><p>To be generic, we can use <code>decltype</code> to automatically determine the iterator type of a given object:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">some_type_that_we_dont_know list;</span><br><span class="line"><span class="keyword">auto</span> r = range&lt;<span class="keyword">decltype</span>(list.<span class="built_in">begin</span>())&gt;(list.<span class="built_in">begin</span>(), list.<span class="built_in">end</span>());</span><br></pre></td></tr></table></figure><h2 id="Compile-time-argument-deduction"><a href="#Compile-time-argument-deduction" class="headerlink" title="Compile-time argument deduction"></a>Compile-time argument deduction</h2><p>But this way we will have to write <code>range&lt;decltype(t.begin())&gt;(t.begin(), t.end())</code> every time… Don’t worry!<br>We can use the <em>complile-time argument deduction</em> (CTAD) feature since C++17 to automatically deduce the<br><code>&lt;class It&gt;</code> with given rule when argument has a confirmed type:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">It</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">range</span> &#123;</span></span><br><span class="line">    It m_begin;</span><br><span class="line">    It m_end;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="title">range</span><span class="params">(It begin, It end)</span></span></span><br><span class="line"><span class="function">        : m_begin(std::move(begin)), m_end(std::move(end))</span></span><br><span class="line"><span class="function">    &#123;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> It <span class="title">begin</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> m_begin; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> It <span class="title">end</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> m_end; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// define the deduction rule:</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">It</span>&gt;</span></span><br><span class="line"><span class="built_in">range</span>(It begin, It end) -&gt; range&lt;It&gt;;</span><br></pre></td></tr></table></figure><p>Then, when <code>range(t.begin(), t.end())</code> is called, it will be automatically deduced as <code>range&lt;decltype(t.begin())&gt;(t.begin(), t.end())</code>.</p><h2 id="The-pipable-class"><a href="#The-pipable-class" class="headerlink" title="The pipable class"></a>The pipable class</h2><p>Given that most transformations only takes one <code>range</code> as input, thus can support the <em>pipe style</em> syntax (excluding <code>zip</code> which requires multiple input), we’d like to define a common class for all kind of range operators, called <code>pipable</code>:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">F</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pipable</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    F m_f;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="title">pipable</span><span class="params">(F f)</span></span></span><br><span class="line"><span class="function">        : m_f(std::move(f))</span></span><br><span class="line"><span class="function">    &#123;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// function style: map(func)(range)</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> ...<span class="title">Rs</span>&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="keyword">decltype</span>(<span class="keyword">auto</span>) <span class="title">operator</span><span class="params">()</span><span class="params">(Rs &amp;&amp;...rs)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">m_f</span>(<span class="built_in">range</span>(rs.<span class="built_in">begin</span>(), rs.<span class="built_in">end</span>())...);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// pipe style: range | map(func)</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">R</span>&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">constexpr</span> <span class="keyword">decltype</span>(<span class="keyword">auto</span>) <span class="keyword">operator</span>|<span class="params">(R &amp;&amp;r, pipable <span class="keyword">const</span> &amp;self)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">self</span>(std::forward&lt;<span class="keyword">decltype</span>(r)&gt;(r));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>It is able to automatically convert <code>f(arg)</code> to pipe syntax <code>arg | f</code>.</p><p>Where the following function used the <code>...</code> syntax since C++11:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> ...<span class="title">Rs</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">decltype</span>(<span class="keyword">auto</span>) <span class="title">operator</span><span class="params">()</span><span class="params">(Rs &amp;&amp;...rs)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">m_f</span>(<span class="built_in">range</span>(rs.<span class="built_in">begin</span>(), rs.<span class="built_in">end</span>())...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>is equivalant to:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">R1</span>, <span class="keyword">class</span> <span class="title">R2</span>, <span class="title">and_so_on</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">decltype</span>(<span class="keyword">auto</span>) <span class="title">operator</span><span class="params">()</span><span class="params">(R1 &amp;&amp;r1, R2 &amp;&amp;r2, and_so_on)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">m_f</span>(<span class="built_in">range</span>(r1.<span class="built_in">begin</span>(), r1.<span class="built_in">end</span>()), <span class="built_in">range</span>(r2.<span class="built_in">begin</span>(), r2.<span class="built_in">end</span>()), and_so_on);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>with flexible number of arguments.</p><h1 id="Implementing-map"><a href="#Implementing-map" class="headerlink" title="Implementing map"></a>Implementing map</h1><p>First let’s implement the easiest range operator: <code>map</code></p><p>To do so, we need to implement our custom iterators, which requires many knowledge on what C++ iterators actually are.</p><h2 id="range-based-for-loops-are-纸老虎"><a href="#range-based-for-loops-are-纸老虎" class="headerlink" title="range-based for loops are 纸老虎"></a>range-based for loops are 纸老虎</h2><p>For example, the following C++11 range-based for loop:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> x: list) &#123;</span><br><span class="line">    <span class="built_in">print</span>(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Is nothing more than a shortcut for:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = list.<span class="built_in">begin</span>(); it != list.<span class="built_in">end</span>(); ++it) &#123;</span><br><span class="line">    <span class="keyword">auto</span> x = *it;</span><br><span class="line">    <span class="built_in">print</span>(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Where the <code>begin</code> and <code>end</code> are duck-typing method names for all objects to be considered iterable, so if you write:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> not_iterable = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> x: not_iterable) &#123;</span><br><span class="line">    <span class="built_in">print</span>(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The compiler will complain something like: error: <code>int</code> have no member named <code>begin</code>.<br>That’s because range-based for loops are just… nothing more than shortcuts…</p><h2 id="Iterators-are-classes-trying-to-imitate-pointers"><a href="#Iterators-are-classes-trying-to-imitate-pointers" class="headerlink" title="Iterators are classes trying to imitate pointers"></a>Iterators are classes trying to imitate pointers</h2><p>So what actually the type <code>it</code> is?</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = list.<span class="built_in">begin</span>(); it != list.<span class="built_in">end</span>(); ++it) &#123;</span><br><span class="line">    <span class="keyword">auto</span> x = *it;</span><br><span class="line">    <span class="built_in">print</span>(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Looking at the <code>*it</code> here, we wonder if <code>it</code> is actually a pointer, i.e. <code>int *</code>?</p><p>Not really, the real type of <code>list.begin()</code> is <code>vector&lt;int&gt;::iterator</code>, which is a class with these operator overloading methods defined:</p><ul><li><code>operator*()</code> for getting the pointed value with <code>*it</code></li><li><code>operator++()</code> for iterate to the next value with <code>++it</code></li><li><code>operator!=()</code> for comparing two iterators to see if it comes to <code>end()</code></li></ul><p>As you can see, C++ iterators are classes trying to behave <strong>as if it is a pointer</strong>, for allowing algorithm reuse ability, and minimize<br>the effort for C programmers to adapt from C pointers to C++ iterators.</p><h2 id="So-to-implement-custom-iterators…"><a href="#So-to-implement-custom-iterators…" class="headerlink" title="So to implement custom iterators…"></a>So to implement custom iterators…</h2><p>So if we want to implement our own iterators, we can simply define the above three operator overloading methods to control the behavior.</p><p>Now that we want to implement <code>map</code>, we acutally is willing the following code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> x: list | <span class="built_in">map</span>(func)) &#123;</span><br><span class="line">    <span class="built_in">print</span>(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>to be translated into:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = list.<span class="built_in">begin</span>(); it != list.<span class="built_in">end</span>(); ++it) &#123;</span><br><span class="line">    <span class="keyword">auto</span> x = <span class="built_in">func</span>(*it);  <span class="comment">// changed here</span></span><br><span class="line">    <span class="built_in">print</span>(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>right?</p><p>So why not just overload the <code>operator*()</code> to make it return <code>func(*it)</code> instead, while other operators remain the same.</p><p>Simple, just define a wrapper class:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Func</span>, <span class="keyword">class</span> <span class="title">Base</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">map_iterator</span> &#123;</span></span><br><span class="line">    Func m_func;</span><br><span class="line">    Base m_it;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// using `decltype(auto)` (since C++14) instead of `auto` so that</span></span><br><span class="line">    <span class="comment">// even if `m_func` returns a reference, it automatically becames</span></span><br><span class="line">    <span class="comment">// `auto &amp;` rather than dereferencing that...</span></span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="keyword">decltype</span>(<span class="keyword">auto</span>) <span class="keyword">operator</span>*<span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">m_func</span>(*m_it);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constexpr</span> map_iterator &amp;<span class="keyword">operator</span>++() &#123;</span><br><span class="line">        ++m_it;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">bool</span> <span class="keyword">operator</span>!=(map_iterator <span class="keyword">const</span> &amp;that) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> m_it != that.m_it;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Func</span>, <span class="keyword">class</span> <span class="title">Base</span>&gt;</span></span><br><span class="line"><span class="built_in">map_iterator</span>(Func, Base) -&gt; map_iterator&lt;Func, Base&gt;;</span><br></pre></td></tr></table></figure><p>And the functor <code>map</code> that returns a range of <code>map_iterator</code>:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">F</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> <span class="title">map</span><span class="params">(F &amp;&amp;f)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pipable</span>([=] (<span class="keyword">auto</span> &amp;&amp;r) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">range</span></span><br><span class="line">            ( map_iterator&#123;f, r.<span class="built_in">begin</span>()&#125;</span><br><span class="line">            , map_iterator&#123;f, r.<span class="built_in">end</span>()&#125;</span><br><span class="line">            );</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Here we used <code>map_iterator&#123;...&#125;</code> rather than <code>map_iterator(...)</code><br>so that we don’t have to write the constructor ourselves but ask<br>the compiler to assign its members with default order (since C++11).</p></blockquote><p>Then test it in main function:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::vector&lt;<span class="keyword">int</span>&gt; list = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;&amp;x: list | <span class="built_in">map</span>([] (<span class="keyword">auto</span> &amp;&amp;x) &#123; <span class="keyword">return</span> x + <span class="number">1</span>; &#125;)) &#123;</span><br><span class="line">        std::cout &lt;&lt; x &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Compile and run it:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ g++ -std=c++20 a.cpp &amp;&amp; ./a.out</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure><p>Succeed! We managed to make our first step in implementing ranges library ourselves!</p><h1 id="What’s-next"><a href="#What’s-next" class="headerlink" title="What’s next?"></a>What’s next?</h1><p>Next, we will go ahead to implement the <code>enumerate</code> and <code>zip</code> as well with the same<br>technique we learnt from implementing the <code>map</code>.</p><h2 id="Implement-enumerate"><a href="#Implement-enumerate" class="headerlink" title="Implement enumerate"></a>Implement enumerate</h2><p>Now that we want to implement <code>enumerate</code>, we acutally is willing the following code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> [x, y]: list | <span class="built_in">enumerate</span>(func)) &#123;</span><br><span class="line">    <span class="built_in">print</span>(x, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>to be translated into:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">size_t</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = list.<span class="built_in">begin</span>(); it != list.<span class="built_in">end</span>(); ++it, ++index) &#123;</span><br><span class="line">    <span class="keyword">auto</span> [x, y] = std::<span class="built_in">pair</span>(index, *it);</span><br><span class="line">    <span class="built_in">print</span>(x, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>right? </p><blockquote><p>Here, the <code>auto [x, y] = ...</code> is the <strong>structual binding</strong> syntax since C++17,<br>and <code>...</code> can be a <code>std::pair</code>, or <code>std::tuple</code>, or any thing unpackable, we will<br>take a deep look into this later.</p></blockquote><p>So now we need to overload <code>operator*()</code> to make it return a pair of values, whose<br>first value is the index, which is incresed during <code>operator++()</code>, like this:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Base</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">enumerate_iterator</span> &#123;</span></span><br><span class="line">    Base m_it;</span><br><span class="line">    std::<span class="keyword">size_t</span> m_index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="keyword">decltype</span>(<span class="keyword">auto</span>) <span class="keyword">operator</span>*<span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> std::pair&lt;std::<span class="keyword">size_t</span>, <span class="keyword">decltype</span>(*m_it)&gt;(m_index, *m_it);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constexpr</span> enumerate_iterator &amp;<span class="keyword">operator</span>++() &#123;</span><br><span class="line">        ++m_it;</span><br><span class="line">        ++m_index;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">bool</span> <span class="keyword">operator</span>!=(enumerate_iterator <span class="keyword">const</span> &amp;that) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> m_it != that.m_it;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Base</span>&gt;</span></span><br><span class="line"><span class="built_in">enumerate_iterator</span>(Base) -&gt; enumerate_iterator&lt;Base&gt;;</span><br></pre></td></tr></table></figure><p>And since the enumerate takes no <code>Func</code> as input like <code>map</code> does, we can<br>simply define <code>enumerate</code> as a global variable:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">static constexpr auto enumerate = pipable([] (auto &amp;&amp;r) &#123;</span><br><span class="line">    return range</span><br><span class="line">        ( enumerate_iterator&#123;r.begin()&#125;</span><br><span class="line">        , enumerate_iterator&#123;r.end()&#125;</span><br><span class="line">        );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>The <code>static</code> here make sure that the symbol doesn’t conflict when the header<br>is being included for multiple times in a single project.</p></blockquote><p>Test it again:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::vector&lt;<span class="keyword">int</span>&gt; list = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;&amp;[x, y]: list | enumerate) &#123;</span><br><span class="line">        std::cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; y &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Or use the function style if you like:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::vector&lt;<span class="keyword">int</span>&gt; list = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;&amp;[x, y]: <span class="built_in">enumerate</span>(list)) &#123;</span><br><span class="line">        std::cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; y &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It should outputs:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0 1</span><br><span class="line">1 2</span><br><span class="line">2 3</span><br><span class="line">3 4</span><br></pre></td></tr></table></figure><p>Worked! Congrats on being Pythonic in modern C++ programming :)<br>Go ranges and no more <code>for (int i = 0; ...</code> bolierplates!</p><h2 id="What-about-zip"><a href="#What-about-zip" class="headerlink" title="What about zip?"></a>What about zip?</h2><p>Homework time! Please try out what you’ve learnt by implement the zip<br>yourself, to test and solidify your new skill :)</p><p>For example:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::vector&lt;<span class="keyword">int</span>&gt; list1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    std::vector&lt;<span class="keyword">int</span>&gt; list2 = &#123;<span class="number">3</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;&amp;[x, y]: <span class="built_in">zip</span>(list1, list2)) &#123;</span><br><span class="line">        std::cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; y &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>should outputs:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 3</span><br><span class="line">2 3</span><br><span class="line">3 9</span><br><span class="line">4 9</span><br></pre></td></tr></table></figure><p>I also prepared some challenge for curious readers, here they goes:</p><h3 id="challenge-A"><a href="#challenge-A" class="headerlink" title="challenge A"></a>challenge A</h3><ul><li>Make <code>zip</code> resulting range size to be the <strong>minimum of all input ranges</strong>.</li></ul><p>For example:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::vector&lt;<span class="keyword">int</span>&gt; list1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;;</span><br><span class="line">    std::vector&lt;<span class="keyword">int</span>&gt; list2 = &#123;<span class="number">3</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;&amp;[x, y]: <span class="built_in">zip</span>(list1, list2)) &#123;</span><br><span class="line">        std::cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; y &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;===&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;&amp;[x, y]: <span class="built_in">zip</span>(list2, list1)) &#123;  <span class="comment">// order reversed!</span></span><br><span class="line">        std::cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; y &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>should outputs:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 3</span><br><span class="line">2 9</span><br><span class="line">===</span><br><span class="line">3 1</span><br><span class="line">9 2</span><br></pre></td></tr></table></figure><h3 id="challenge-B"><a href="#challenge-B" class="headerlink" title="challenge B"></a>challenge B</h3><ul><li>Make <code>zip</code> takes <code>n</code> number of ranges as input, while <code>operator*()</code><br>returns a <strong><code>std::tuple</code> with size <code>n</code></strong>.</li></ul><p>For example:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::vector&lt;<span class="keyword">int</span>&gt; list1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    std::vector&lt;<span class="keyword">int</span>&gt; list2 = &#123;<span class="number">3</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    std::vector&lt;<span class="keyword">float</span>&gt; list3 = &#123;<span class="number">3.14f</span>, <span class="number">2.718f</span>, <span class="number">1.414f</span>, <span class="number">0.618f</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;&amp;[x, y, z]: <span class="built_in">zip</span>(list1, list2, list3)) &#123;</span><br><span class="line">        std::cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; y &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>should outputs:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 3 3.14</span><br><span class="line">2 3 2.718</span><br><span class="line">3 9 1.414</span><br><span class="line">4 9 0.618</span><br></pre></td></tr></table></figure><blockquote><p>Yes, the Python <code>zip</code> can pass above two ‘challenge’ :)</p></blockquote><h1 id="Finally…"><a href="#Finally…" class="headerlink" title="Finally…"></a>Finally…</h1><p>You may ‘submit’ the ‘homework’ via 评论区, or GitHub, or any<br>other way that fesible. Submitting this homework won’t affect<br>anyone’s GPA or KPI, but this one is <em>just for fun</em>!</p><p>Below is the final source code of this tutorial, your homework<br>may be either based on it or completely from scratch:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// compile with -std=c++17</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">It</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">range</span> &#123;</span></span><br><span class="line">    It m_begin;</span><br><span class="line">    It m_end;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="title">range</span><span class="params">(It begin, It end)</span></span></span><br><span class="line"><span class="function">        : m_begin(std::move(begin)), m_end(std::move(end))</span></span><br><span class="line"><span class="function">    &#123;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> It <span class="title">begin</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> m_begin; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> It <span class="title">end</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> m_end; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">It</span>&gt;</span></span><br><span class="line"><span class="built_in">range</span>(It, It) -&gt; range&lt;It&gt;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">F</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pipable</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    F m_f;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="title">pipable</span><span class="params">(F f)</span></span></span><br><span class="line"><span class="function">        : m_f(std::move(f))</span></span><br><span class="line"><span class="function">    &#123;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> ...<span class="title">Rs</span>&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="keyword">decltype</span>(<span class="keyword">auto</span>) <span class="title">operator</span><span class="params">()</span><span class="params">(Rs &amp;&amp;...rs)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">m_f</span>(<span class="built_in">range</span>(rs.<span class="built_in">begin</span>(), rs.<span class="built_in">end</span>())...);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">R</span>&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">constexpr</span> <span class="keyword">decltype</span>(<span class="keyword">auto</span>) <span class="keyword">operator</span>|<span class="params">(R &amp;&amp;r, pipable <span class="keyword">const</span> &amp;self)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">self</span>(std::forward&lt;<span class="keyword">decltype</span>(r)&gt;(r));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Func</span>, <span class="keyword">class</span> <span class="title">Base</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">map_iterator</span> &#123;</span></span><br><span class="line">    Func m_func;</span><br><span class="line">    Base m_it;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="keyword">decltype</span>(<span class="keyword">auto</span>) <span class="keyword">operator</span>*<span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">m_func</span>(*m_it);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constexpr</span> map_iterator &amp;<span class="keyword">operator</span>++() &#123;</span><br><span class="line">        ++m_it;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">bool</span> <span class="keyword">operator</span>!=(map_iterator <span class="keyword">const</span> &amp;that) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> m_it != that.m_it;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Func</span>, <span class="keyword">class</span> <span class="title">Base</span>&gt;</span></span><br><span class="line"><span class="built_in">map_iterator</span>(Func, Base) -&gt; map_iterator&lt;Func, Base&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">F</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> <span class="title">map</span><span class="params">(F &amp;&amp;f)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pipable</span>([=] (<span class="keyword">auto</span> &amp;&amp;r) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">range</span></span><br><span class="line">            ( map_iterator&#123;f, r.<span class="built_in">begin</span>()&#125;</span><br><span class="line">            , map_iterator&#123;f, r.<span class="built_in">end</span>()&#125;</span><br><span class="line">            );</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Base</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">enumerate_iterator</span> &#123;</span></span><br><span class="line">    Base m_it;</span><br><span class="line">    std::<span class="keyword">size_t</span> m_index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="keyword">decltype</span>(<span class="keyword">auto</span>) <span class="keyword">operator</span>*<span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> std::pair&lt;std::<span class="keyword">size_t</span>, <span class="keyword">decltype</span>(*m_it)&gt;(m_index, *m_it);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constexpr</span> enumerate_iterator &amp;<span class="keyword">operator</span>++() &#123;</span><br><span class="line">        ++m_it;</span><br><span class="line">        ++m_index;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">bool</span> <span class="keyword">operator</span>!=(enumerate_iterator <span class="keyword">const</span> &amp;that) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> m_it != that.m_it;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Base</span>&gt;</span></span><br><span class="line"><span class="built_in">enumerate_iterator</span>(Base) -&gt; enumerate_iterator&lt;Base&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> enumerate = <span class="built_in">pipable</span>([] (<span class="keyword">auto</span> &amp;&amp;r) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">range</span></span><br><span class="line">        ( enumerate_iterator&#123;r.<span class="built_in">begin</span>()&#125;</span><br><span class="line">        , enumerate_iterator&#123;r.<span class="built_in">end</span>()&#125;</span><br><span class="line">        );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::vector&lt;<span class="keyword">int</span>&gt; list = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;&amp;x: list | <span class="built_in">map</span>([] (<span class="keyword">auto</span> &amp;&amp;x) &#123; <span class="keyword">return</span> x + <span class="number">1</span>; &#125;)) &#123;</span><br><span class="line">        std::cout &lt;&lt; x &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;&amp;[x, y]: <span class="built_in">enumerate</span>(list)) &#123;</span><br><span class="line">        std::cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; y &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement zip...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Also checkout my <a href="archibate.top">personal website</a> <a href="archibate.gitee.io">[国内镜像站]</a><br>where this post were uploaded, Zhihu will also be uploaded synchronously.</p>]]></content>
      
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/11/15/hello-world/"/>
      <url>/2021/11/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
